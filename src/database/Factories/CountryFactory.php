<?php

namespace Lwwcas\LaravelCountries\Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Str;
use Lwwcas\LaravelCountries\Database\Factories\CountryRegionFactory;
use Lwwcas\LaravelCountries\Models\Country;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Model>
 */
class CountryFactory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     */
    protected $model = Country::class;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        $name = fake()->country() . ' ' . fake()->word();
        $emoji = [
            'img' => fake()->emoji(),
            'uCode'=> fake()->numerify('U+##### U+#####'),
        ];

        return [
            'lc_region_id' => CountryRegionFactory::new()->create()->id,
            'uid' => fake()->unixTime(),

            'official_name' => Str::title($name),
            'capital' => 'Capital ' . Str::title($name),
            'iso_alpha_2' => fake()->countryCode(),
            'iso_alpha_3' => fake()->countryISOAlpha3(),
            'iso_numeric' => fake()->randomNumber(3, false),

            'international_phone' => fake()->randomNumber(3, true),
            'geoname_id' => fake()->randomNumber(7, true),
            'wmo' => Str::upper(fake()->randomLetter() . fake()->randomLetter()),
            'independence_day' => fake()->date('Y-m-d'),

            'population' => fake()->date('Y-m-d'),
            'area' => fake()->randomNumber(3, false),
            'gdp' => fake()->randomNumber(3, false),

            'languages' => $this->randomLanguages(),
            'tld' => $this->randomLtd(),
            'alternative_tld' => $this->randomLtd(),
            'borders' => $this->randomLanguages(),
            'timezones' => null,
            'currency' => null,

            'flag_emoji' => [
                'img' => fake()->emoji(),
                'utf8' => '&#'. fake()->numberBetween(128512, 128567)  . ';',
                'utf16' => '\\uD83C\\uDDE6\\uD83C\\uDDE9',
                'uCode' => 'U+1F1E6 U+1F1E9',
                'hex' => '&#x1F1E6;&#x1F1E9',
                'html' => '&#x1F1E6;&#x1F1E9;',
                'css' => '\\1F1E6\\1F1E9',
                'decimal' => '&#127462;&#127465;',
                'shortcode' => ':flag-'. Str::lower(fake()->countryCode()) .':',
            ],

            'flag_colors' => null,
            'flag_colors_web' => null,
            'flag_colors_contrast' => null,
            'flag_colors_hex' => null,
            'flag_colors_rgb' => null,
            'flag_colors_cmyk' => null,
            'flag_colors_hsl' => null,
            'flag_colors_hsv' => null,
            'flag_colors_pantone' => null,

            'is_visible' => true,
        ];
    }

    /**
     * Generates a random list of languages.
     *
     * Returns an empty array if the first random digit is 0.
     * Otherwise, generates a list of random language codes with
     * the same length as the random digit.
     *
     * @return string[]
     */
    protected function randomLanguages()
    {
        $rand = fake()->randomDigit();
        if ($rand === 0) {
            return [];
        }

        $languages = [];
        foreach (range(1, $rand) as $item) {
             $languages[] = fake()->languageCode();
        }

        return $languages;
    }

    /**
     * Generates a random list of top-level domains.
     *
     * Returns an empty array if the first random digit is 0.
     * Otherwise, generates a list of random top-level domains with
     * the same length as the random digit.
     *
     * The top-level domains are generated by prefixing the language code
     * with a period ('.').
     *
     * @return string[]
     */
    protected function randomLtd()
    {
        $rand = fake()->randomDigit();
        if ($rand === 0) {
            return [];
        }

        $ltd = [];
        foreach (range(1, $rand) as $item) {
            $ltd[] = '.' . fake()->languageCode();
        }

        return $ltd;
    }

    /**
     * Generates an array of random hex and rgb colors.
     *
     * The number of colors is randomly determined between 1 and 4.
     * The function returns an associative array with two keys: 'hex' and 'rgb'.
     * The 'hex' key contains an array of hex color codes.
     * The 'rgb' key contains an array of rgb color codes.
     *
     * @return array
     */
    protected function generateColors(): array
    {
        $rand = fake()->numberBetween(1, 4);
        $hexColors = [];
        $rbgColors = [];

        foreach (range(1, $rand) as $item) {
            $hexColors[] = fake()->hexColor();
            $rbgColors[] = fake()->rgbColor();
        }

        return [
            'hex' => $hexColors,
            'rgb' => $rbgColors,
        ];
    }


}
