import{_ as t,c as a,a1 as o,o as n}from"./chunks/framework.C72X4JAr.js";const d=JSON.parse('{"title":"Version Constraints","description":"","frontmatter":{},"headers":[],"relativePath":"introduction/version-constraints.md","filePath":"introduction/version-constraints.md"}'),r={name:"introduction/version-constraints.md"};function s(i,e,l,g,h,p){return n(),a("div",null,e[0]||(e[0]=[o(`<h1 id="version-constraints" tabindex="-1">Version Constraints <a class="header-anchor" href="#version-constraints" aria-label="Permalink to &quot;Version Constraints&quot;">​</a></h1><h2 id="semantic-versioning" tabindex="-1">Semantic Versioning <a class="header-anchor" href="#semantic-versioning" aria-label="Permalink to &quot;Semantic Versioning&quot;">​</a></h2><p>A version consists of four parts: <strong>MAJOR.LARAVEL.MINOR.PATCH</strong>. For example, version <strong>1.11.2.3</strong> of a package could be interpreted as a package on major version 1, Laravel version 11, minor version 2, and patch level 3.</p><h3 id="version-breakdown" tabindex="-1">Version Breakdown <a class="header-anchor" href="#version-breakdown" aria-label="Permalink to &quot;Version Breakdown&quot;">​</a></h3><ul><li><p><strong>Major</strong>: Indicates breaking changes compared to the previous release. Consumers of the package will need to adjust their existing code when upgrading to a new major version.</p></li><li><p><strong>Laravel</strong>: Refers to the version of Laravel that the package is compatible with. This ensures the package aligns with the corresponding Laravel release cycle, allowing for seamless integration.</p></li><li><p><strong>Minor</strong>: Represents added functionality (e.g., new methods or features) that does not break existing functionality. Consumers of the package will not need to modify their code to continue using the package.</p></li><li><p><strong>Patch Level</strong>: Refers to bug fixes, performance improvements, or updated dependencies. This does not introduce new functionality, and consumers do not need to make changes to their code when upgrading.</p></li></ul><blockquote><p><strong>Note</strong>: For a more in-depth overview of Semantic Versioning, you can visit <a href="https://semver.org" target="_blank" rel="noreferrer">semver.org</a>.</p></blockquote><blockquote><p><strong>Note</strong>: This section offers a brief overview of how Semantic Versioning is used and applied in Laravel Countries</p></blockquote><h2 id="version-compatibility" tabindex="-1">Version Compatibility <a class="header-anchor" href="#version-compatibility" aria-label="Permalink to &quot;Version Compatibility&quot;">​</a></h2><p>The following table outlines the compatibility of the <strong>Laravel Countries</strong> package version with different Laravel versions:</p><table tabindex="0"><thead><tr><th>Package Version</th><th>Laravel</th><th>Status</th></tr></thead><tbody><tr><td>4.11.x.x</td><td>11</td><td>✅</td></tr><tr><td>4.11.x.x</td><td>10</td><td>✅</td></tr></tbody></table><h2 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h2><p>The <strong>Laravel Countries</strong> package has the following system and package requirements to ensure proper functionality. Below is a breakdown of the required versions for both runtime and development environments.</p><h3 id="runtime-requirements-production" tabindex="-1">Runtime Requirements (Production) <a class="header-anchor" href="#runtime-requirements-production" aria-label="Permalink to &quot;Runtime Requirements (Production)&quot;">​</a></h3><ul><li><p><strong>PHP</strong>: The package supports PHP versions <strong>^8.0</strong>, <strong>^8.1</strong>, and <strong>^8.2</strong>, ensuring compatibility with modern PHP versions.</p></li><li><p><strong>Laravel Framework</strong>: Compatible with Laravel versions <strong>^9.0</strong>, <strong>^10.0</strong>, and <strong>^11.0</strong>. This ensures that the package can be used with the most up-to-date releases of the Laravel framework.</p></li><li><p><strong>Astrotomic Laravel Translatable</strong>: Requires version <strong>^11.8</strong> of the <strong>Astrotomic Laravel Translatable</strong> package for multilingual support in the application.</p></li><li><p><strong>Spatie Laravel Package Tools</strong>: Requires version <strong>^1.16.0</strong> of <strong>Spatie&#39;s Laravel Package Tools</strong> to assist in the package setup and management.</p></li></ul><h3 id="development-requirements" tabindex="-1">Development Requirements <a class="header-anchor" href="#development-requirements" aria-label="Permalink to &quot;Development Requirements&quot;">​</a></h3><p>The following dependencies are required for development and testing purposes:</p><ul><li><p><strong>Doctrine DBAL</strong>: Version <strong>^3.0</strong> is required for handling more advanced database schema changes.</p></li><li><p><strong>Laravel Legacy Factories</strong>: Version <strong>^1.0.4</strong> is needed for maintaining compatibility with older Laravel factory structures.</p></li><li><p><strong>Orchestra Testbench</strong>: Version <strong>^7.0</strong> is used for testing the package in a Laravel-like environment without needing a full Laravel application.</p></li><li><p><strong>PHPUnit</strong>: Version <strong>9.6.0</strong> is required for running unit tests to ensure package reliability and stability.</p></li></ul><p>Ensure that your environment meets these requirements to guarantee smooth installation and usage of the <strong>Laravel Countries</strong> package.</p><h2 id="releasing-a-new-version" tabindex="-1">Releasing a New Version <a class="header-anchor" href="#releasing-a-new-version" aria-label="Permalink to &quot;Releasing a New Version&quot;">​</a></h2><p>When releasing a new version of your Laravel Countries package, it&#39;s important to understand how versioning works and how you can configure automatic updates for certain parts of the version number.</p><h3 id="automatic-updates-for-patch-and-minor-versions" tabindex="-1">Automatic Updates for Patch and Minor Versions <a class="header-anchor" href="#automatic-updates-for-patch-and-minor-versions" aria-label="Permalink to &quot;Automatic Updates for Patch and Minor Versions&quot;">​</a></h3><p>To ensure your package stays up-to-date automatically for minor changes (such as bug fixes or small feature improvements), you can allow Composer to update the <strong>patch</strong> and <strong>minor</strong> parts of the version automatically. For example:</p><ul><li>Version <strong>4.11.x.x</strong> means: <ul><li>The <strong>4</strong> is the <strong>major</strong> version, which should only be changed when there are significant, breaking changes.</li><li>The <strong>11</strong> represents the <strong>Laravel version</strong>. You will need to change this number whenever you want to ensure compatibility with a new major release of Laravel (e.g., Laravel 12).</li><li>The <strong>x.x</strong> represents the <strong>minor</strong> and <strong>patch</strong> versions, which Composer can automatically update. This means that if you configure your package version as <strong>4.11.*</strong>, it will automatically update for minor changes and bug fixes within the same Laravel version.</li></ul></li></ul><h3 id="how-to-configure-automatic-updates" tabindex="-1">How to Configure Automatic Updates <a class="header-anchor" href="#how-to-configure-automatic-updates" aria-label="Permalink to &quot;How to Configure Automatic Updates&quot;">​</a></h3><p>To allow Composer to automatically update the minor and patch versions, you can specify your dependency like this:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lwwcas/laravel-countries:^4.11</span></span></code></pre></div><p>Use a version format like <strong>^4.11</strong> to tell Composer to install the <strong>latest minor and patch versions</strong> of <strong>4.11</strong>. This way, <strong>4.11.0.x</strong> and <strong>4.11.x.x</strong> will be automatically updated without requiring manual intervention.</p><h3 id="updating-the-laravel-version" tabindex="-1">Updating the Laravel Version <a class="header-anchor" href="#updating-the-laravel-version" aria-label="Permalink to &quot;Updating the Laravel Version&quot;">​</a></h3><p>Every time Laravel releases a new major version (e.g., Laravel 12), you will need to manually update the <strong>Laravel version</strong> in your dependency. For example:</p><ul><li><strong>4.12.x.x</strong> should be used when you want to support Laravel 12.</li><li>The <strong>11</strong> should be changed to <strong>12</strong> in the version, as in <strong>4.12.x.x</strong>, whenever you are ready to support the latest major version of Laravel.</li></ul><p>This change ensures compatibility with the latest features and updates in the new Laravel release.</p><h3 id="major-version-updates-4-x-x-x-to-5-x-x-x" tabindex="-1">Major Version Updates (4.x.x.x to 5.x.x.x) <a class="header-anchor" href="#major-version-updates-4-x-x-x-to-5-x-x-x" aria-label="Permalink to &quot;Major Version Updates (4.x.x.x to 5.x.x.x)&quot;">​</a></h3><p>Upgrading to a new <strong>major version</strong> (from <strong>4.x</strong> to <strong>5.x</strong>) is a significant change and should only be done after careful consideration. A major version change often includes breaking changes that could affect the stability of your application.</p><p>Here are a few important guidelines:</p><ol><li><strong>Backup</strong>: Always perform a full backup of your project before updating to a new major version.</li><li><strong>Testing</strong>: Run extensive tests to ensure that the new structure of the package works seamlessly with your existing codebase.</li><li><strong>Review Breaking Changes</strong>: Check the release notes or changelog to see if there are any breaking changes in the new major version.</li></ol><p>We strongly recommend upgrading to a new major version only after you have validated that the new structure meets all your requirements and passes all necessary tests.</p><h3 id="best-practices-for-versioning" tabindex="-1">Best Practices for Versioning <a class="header-anchor" href="#best-practices-for-versioning" aria-label="Permalink to &quot;Best Practices for Versioning&quot;">​</a></h3><ul><li><strong>Patch and minor versions</strong>: Let Composer handle automatic updates by using <code>^4.11</code> in your dependency version.</li><li><strong>Laravel version updates</strong>: Update the second number in your version (e.g., from <strong>4.11</strong> to <strong>4.12</strong>) to ensure compatibility with the latest Laravel release.</li><li><strong>Major version updates</strong>: Proceed with caution when updating the first number (e.g., from <strong>4.x</strong> to <strong>5.x</strong>) and make sure to thoroughly test the new version.</li></ul><p>By following these steps, you can keep your Laravel Countries package up-to-date and compatible with the latest features while maintaining stability in your projects.</p><h2 id="maintaining-an-old-version" tabindex="-1">Maintaining an Old Version <a class="header-anchor" href="#maintaining-an-old-version" aria-label="Permalink to &quot;Maintaining an Old Version&quot;">​</a></h2><p>If you want to maintain an older version of the <strong>Laravel Countries</strong> package and prevent it from updating to a newer major or minor version, you can configure Composer to only allow specific types of updates.</p><h3 id="locking-the-version" tabindex="-1">Locking the Version <a class="header-anchor" href="#locking-the-version" aria-label="Permalink to &quot;Locking the Version&quot;">​</a></h3><p>To lock your project to a specific version (for example, <strong>4.11.0</strong>), preventing any updates, you can set the exact version in your <code>composer.json</code> file:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lwwcas/laravel-countries&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4.11.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This ensures that the package will <strong>not</strong> be updated to any newer minor or patch versions.</p><h3 id="allowing-only-patch-updates" tabindex="-1">Allowing Only Patch Updates <a class="header-anchor" href="#allowing-only-patch-updates" aria-label="Permalink to &quot;Allowing Only Patch Updates&quot;">​</a></h3><p>If you want to allow <strong>patch</strong> updates (the last part of the version, x.x), but not <strong>minor</strong> or <strong>major</strong> updates, you can configure Composer using a tilde (<code>~</code>). For example:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lwwcas/laravel-countries&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;~4.11.0.1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Using a tilde version constraint like <strong>~4.11.0</strong> will allow Composer to update <strong>patch</strong> versions like <strong>4.11.1</strong>, <strong>4.11.2</strong>, etc., but it will <strong>not</strong> update to a new minor version like <strong>4.12.x</strong> or a major version like <strong>5.x.x</strong>.</p><h3 id="best-practice-for-old-version-maintenance" tabindex="-1">Best Practice for Old Version Maintenance <a class="header-anchor" href="#best-practice-for-old-version-maintenance" aria-label="Permalink to &quot;Best Practice for Old Version Maintenance&quot;">​</a></h3><ul><li>Use an <strong>exact version</strong> (e.g., <code>4.11.0</code>) if you want to completely lock the version and avoid any updates.</li><li>Use the <strong>tilde version constraint</strong> (<code>~4.11.0</code>) if you want to allow only <strong>patch</strong> updates but avoid minor or major version upgrades.</li><li>Regularly review the changelog of new versions to decide when it is appropriate to manually upgrade to a newer version.</li></ul><p>By following this approach, you can maintain stability in your project while allowing controlled updates to the package as needed.</p>`,52)]))}const u=t(r,[["render",s]]);export{d as __pageData,u as default};
